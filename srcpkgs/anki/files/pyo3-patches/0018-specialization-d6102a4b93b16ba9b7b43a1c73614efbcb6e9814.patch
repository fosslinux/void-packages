From d6102a4b93b16ba9b7b43a1c73614efbcb6e9814 Mon Sep 17 00:00:00 2001
From: Martin Donlon <github-martin@donlons.com>
Date: Mon, 4 Nov 2019 21:13:08 -0800
Subject: [PATCH] Hack and slash to get arithmetic tests working

---
 pyo3-derive-backend/src/defs.rs               | 127 +++++++++---------

diff --git a/pyo3-derive-backend/src/defs.rs b/pyo3-derive-backend/src/defs.rs
index 06c1c6754..d793c9628 100644
--- a/pyo3-derive-backend/src/defs.rs
+++ b/pyo3-derive-backend/src/defs.rs
@@ -24,7 +24,7 @@ const OBJECT: Proto = Proto {
             arg: "Name",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectGetAttrProtocol",
-            default: "pyo3::class::basic::PyObjectGetAttrProtocol",
+            default: "pyo3::class::basic::GetAttrProtocolImpl",
         },
         MethodProto::Ternary {
             name: "__setattr__",
@@ -32,58 +32,65 @@ const OBJECT: Proto = Proto {
             arg2: "Value",
             pyres: false,
             proto: "pyo3::class::basic::PyObjectSetAttrProtocol",
-            default: "pyo3::class::basic::PyObjectSetAttrProtocol",
+            default: "pyo3::class::basic::tp_setattro_impl::SetAttr",
         },
         MethodProto::Binary {
             name: "__delattr__",
             arg: "Name",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectDelAttrProtocol",
-            default: "pyo3::class::basic::PyObjectDelAttrProtocol",
+            default: "pyo3::class::basic::tp_setattro_impl::DelAttr",
         },
         MethodProto::Unary {
             name: "__str__",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectStrProtocol",
-            default: "pyo3::class::basic::PyObjectStrProtocol",
+            default: "pyo3::class::basic::StrProtocolImpl",
         },
         MethodProto::Unary {
             name: "__repr__",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectReprProtocol",
-            default: "pyo3::class::basic::PyObjectReprProtocol",
+            default: "pyo3::class::basic::ReprProtocolImpl",
         },
         MethodProto::Binary {
             name: "__format__",
             arg: "Format",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectFormatProtocol",
-            default: "pyo3::class::basic::PyObjectFormatProtocol",
+            default: "pyo3::class::basic::FormatProtocolImpl",
         },
         MethodProto::Unary {
             name: "__hash__",
             pyres: false,
             proto: "pyo3::class::basic::PyObjectHashProtocol",
-            default: "pyo3::class::basic::PyObjectHashProtocol",
+            default: "pyo3::class::basic::HashProtocolImpl",
         },
         MethodProto::Unary {
             name: "__bytes__",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectBytesProtocol",
-            default: "pyo3::class::basic::PyObjectBytesProtocol",
+            default: "pyo3::class::basic::BytesProtocolImpl",
+        },
+        MethodProto::Unary {
+            // MJDFIXME ???
+            name: "__unicode__",
+            pyres: true,
+            proto: "pyo3::class::basic::PyObjectUnicodeProtocol",
+            default: "pyo3::class::basic::UnicodeProtocolImpl",
         },
         MethodProto::Unary {
             name: "__bool__",
             pyres: false,
             proto: "pyo3::class::basic::PyObjectBoolProtocol",
-            default: "pyo3::class::basic::PyObjectBoolProtocol",
+            default: "pyo3::class::basic::BoolProtocolImpl",
         },
         MethodProto::Binary {
             name: "__richcmp__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectRichcmpProtocol",
-            default: "pyo3::class::basic::PyObjectRichcmpProtocol",
+            default: "pyo3::class::basic::RichcmpProtocolImpl",
         },
     ],
     py_methods: &[
@@ -451,7 +458,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberAddProtocol",
-            default: "pyo3::class::number::PyNumberAddProtocol",
+            default: "pyo3::class::number::PyNumberAddProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__sub__",
@@ -459,7 +466,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberSubProtocol",
-            default: "pyo3::class::number::PyNumberSubProtocol",
+            default: "pyo3::class::number::PyNumberSubProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__mul__",
@@ -467,7 +474,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberMulProtocol",
-            default: "pyo3::class::number::PyNumberMulProtocol",
+            default: "pyo3::class::number::PyNumberMulProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__matmul__",
@@ -475,7 +482,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberMatmulProtocol",
-            default: "pyo3::class::number::PyNumberMatmulProtocol",
+            default: "pyo3::class::number::PyNumberMatmulProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__truediv__",
@@ -483,7 +490,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberTruedivProtocol",
-            default: "pyo3::class::number::PyNumberTruedivProtocol",
+            default: "pyo3::class::number::PyNumberTruedivProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__floordiv__",
@@ -491,7 +498,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberFloordivProtocol",
-            default: "pyo3::class::number::PyNumberFloordivProtocol",
+            default: "pyo3::class::number::PyNumberFloordivProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__mod__",
@@ -499,7 +506,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberModProtocol",
-            default: "pyo3::class::number::PyNumberModProtocol",
+            default: "pyo3::class::number::PyNumberModProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__divmod__",
@@ -507,7 +514,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberDivmodProtocol",
-            default: "pyo3::class::number::PyNumberDivmodProtocol",
+            default: "pyo3::class::number::PyNumberDivmodProtocolImpl",
         },
         MethodProto::TernaryS {
             name: "__pow__",
@@ -516,7 +523,7 @@ const NUM: Proto = Proto {
             arg3: "Modulo",
             pyres: true,
             proto: "pyo3::class::number::PyNumberPowProtocol",
-            default: "pyo3::class::number::PyNumberPowProtocol",
+            default: "pyo3::class::number::PyNumberPowProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__lshift__",
@@ -524,7 +531,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberLShiftProtocol",
-            default: "pyo3::class::number::PyNumberLShiftProtocol",
+            default: "pyo3::class::number::PyNumberLShiftProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__rshift__",
@@ -532,7 +539,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRShiftProtocol",
-            default: "pyo3::class::number::PyNumberRShiftProtocol",
+            default: "pyo3::class::number::PyNumberRShiftProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__and__",
@@ -540,7 +547,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberAndProtocol",
-            default: "pyo3::class::number::PyNumberAndProtocol",
+            default: "pyo3::class::number::PyNumberAndProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__xor__",
@@ -548,7 +555,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberXorProtocol",
-            default: "pyo3::class::number::PyNumberXorProtocol",
+            default: "pyo3::class::number::PyNumberXorProtocolImpl",
         },
         MethodProto::BinaryS {
             name: "__or__",
@@ -556,63 +563,63 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberOrProtocol",
-            default: "pyo3::class::number::PyNumberOrProtocol",
+            default: "pyo3::class::number::PyNumberOrProtocolImpl",
         },
         MethodProto::Binary {
             name: "__radd__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRAddProtocol",
-            default: "pyo3::class::number::PyNumberRAddProtocol",
+            default: "pyo3::class::number::PyNumberRAddProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rsub__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRSubProtocol",
-            default: "pyo3::class::number::PyNumberRSubProtocol",
+            default: "pyo3::class::number::PyNumberRSubProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rmul__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRMulProtocol",
-            default: "pyo3::class::number::PyNumberRMulProtocol",
+            default: "pyo3::class::number::PyNumberRMulProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rmatmul__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRMatmulProtocol",
-            default: "pyo3::class::number::PyNumberRMatmulProtocol",
+            default: "pyo3::class::number::PyNumberRMatmulProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rtruediv__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRTruedivProtocol",
-            default: "pyo3::class::number::PyNumberRTruedivProtocol",
+            default: "pyo3::class::number::PyNumberRTruedivProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rfloordiv__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRFloordivProtocol",
-            default: "pyo3::class::number::PyNumberRFloordivProtocol",
+            default: "pyo3::class::number::PyNumberRFloordivProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rmod__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRModProtocol",
-            default: "pyo3::class::number::PyNumberRModProtocol",
+            default: "pyo3::class::number::PyNumberRModProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rdivmod__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRDivmodProtocol",
-            default: "pyo3::class::number::PyNumberRDivmodProtocol",
+            default: "pyo3::class::number::PyNumberRDivmodProtocolImpl",
         },
         MethodProto::Ternary {
             name: "__rpow__",
@@ -620,91 +627,91 @@ const NUM: Proto = Proto {
             arg2: "Modulo",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRPowProtocol",
-            default: "pyo3::class::number::PyNumberRPowProtocol",
+            default: "pyo3::class::number::PyNumberRPowProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rlshift__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRLShiftProtocol",
-            default: "pyo3::class::number::PyNumberRLShiftProtocol",
+            default: "pyo3::class::number::PyNumberRLShiftProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rrshift__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRRShiftProtocol",
-            default: "pyo3::class::number::PyNumberRRShiftProtocol",
+            default: "pyo3::class::number::PyNumberRRShiftProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rand__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRAndProtocol",
-            default: "pyo3::class::number::PyNumberRAndProtocol",
+            default: "pyo3::class::number::PyNumberRAndProtocolImpl",
         },
         MethodProto::Binary {
             name: "__rxor__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRXorProtocol",
-            default: "pyo3::class::number::PyNumberRXorProtocol",
+            default: "pyo3::class::number::PyNumberRXorProtocolImpl",
         },
         MethodProto::Binary {
             name: "__ror__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberROrProtocol",
-            default: "pyo3::class::number::PyNumberROrProtocol",
+            default: "pyo3::class::number::PyNumberROrProtocolImpl",
         },
         MethodProto::Binary {
             name: "__iadd__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIAddProtocol",
-            default: "pyo3::class::number::PyNumberIAddProtocol",
+            default: "pyo3::class::number::PyNumberIAddProtocolImpl",
         },
         MethodProto::Binary {
             name: "__isub__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberISubProtocol",
-            default: "pyo3::class::number::PyNumberISubProtocol",
+            default: "pyo3::class::number::PyNumberISubProtocolImpl",
         },
         MethodProto::Binary {
             name: "__imul__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIMulProtocol",
-            default: "pyo3::class::number::PyNumberIMulProtocol",
+            default: "pyo3::class::number::PyNumberIMulProtocolImpl",
         },
         MethodProto::Binary {
             name: "__imatmul__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIMatmulProtocol",
-            default: "pyo3::class::number::PyNumberIMatmulProtocol",
+            default: "pyo3::class::number::PyNumberIMatmulProtocolImpl",
         },
         MethodProto::Binary {
             name: "__itruediv__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberITruedivProtocol",
-            default: "pyo3::class::number::PyNumberITruedivProtocol",
+            default: "pyo3::class::number::PyNumberITruedivProtocolImpl",
         },
         MethodProto::Binary {
             name: "__ifloordiv__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIFloordivProtocol",
-            default: "pyo3::class::number::PyNumberIFloordivProtocol",
+            default: "pyo3::class::number::PyNumberIFloordivProtocolImpl",
         },
         MethodProto::Binary {
             name: "__imod__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIModProtocol",
-            default: "pyo3::class::number::PyNumberIModProtocol",
+            default: "pyo3::class::number::PyNumberIModProtocolImpl",
         },
         MethodProto::Ternary {
             name: "__ipow__",
@@ -712,96 +719,96 @@ const NUM: Proto = Proto {
             arg2: "Modulo",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIPowProtocol",
-            default: "pyo3::class::number::PyNumberIPowProtocol",
+            default: "pyo3::class::number::PyNumberIPowProtocolImpl",
         },
         MethodProto::Binary {
             name: "__ilshift__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberILShiftProtocol",
-            default: "pyo3::class::number::PyNumberILShiftProtocol",
+            default: "pyo3::class::number::PyNumberILShiftProtocolImpl",
         },
         MethodProto::Binary {
             name: "__irshift__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIRShiftProtocol",
-            default: "pyo3::class::number::PyNumberIRShiftProtocol",
+            default: "pyo3::class::number::PyNumberIRShiftProtocolImpl",
         },
         MethodProto::Binary {
             name: "__iand__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIAndProtocol",
-            default: "pyo3::class::number::PyNumberIAndProtocol",
+            default: "pyo3::class::number::PyNumberIAndProtocolImpl",
         },
         MethodProto::Binary {
             name: "__ixor__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIXorProtocol",
-            default: "pyo3::class::number::PyNumberIXorProtocol",
+            default: "pyo3::class::number::PyNumberIXorProtocolImpl",
         },
         MethodProto::Binary {
             name: "__ior__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIOrProtocol",
-            default: "pyo3::class::number::PyNumberIOrProtocol",
+            default: "pyo3::class::number::PyNumberIOrProtocolImpl",
         },
         MethodProto::Unary {
             name: "__neg__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberNegProtocol",
-            default: "pyo3::class::number::PyNumberNegProtocol",
+            default: "pyo3::class::number::PyNumberNegProtocolImpl",
         },
         MethodProto::Unary {
             name: "__pos__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberPosProtocol",
-            default: "pyo3::class::number::PyNumberPosProtocol",
+            default: "pyo3::class::number::PyNumberPosProtocolImpl",
         },
         MethodProto::Unary {
             name: "__abs__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberAbsProtocol",
-            default: "pyo3::class::number::PyNumberAbsProtocol",
+            default: "pyo3::class::number::PyNumberAbsProtocolImpl",
         },
         MethodProto::Unary {
             name: "__invert__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberInvertProtocol",
-            default: "pyo3::class::number::PyNumberInvertProtocol",
+            default: "pyo3::class::number::PyNumberInvertProtocolImpl",
         },
         MethodProto::Unary {
             name: "__complex__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberComplexProtocol",
-            default: "pyo3::class::number::PyNumberComplexProtocol",
+            default: "pyo3::class::number::PyNumberComplexProtocolImpl",
         },
         MethodProto::Unary {
             name: "__int__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberIntProtocol",
-            default: "pyo3::class::number::PyNumberIntProtocol",
+            default: "pyo3::class::number::PyNumberIntProtocolImpl",
         },
         MethodProto::Unary {
             name: "__float__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberFloatProtocol",
-            default: "pyo3::class::number::PyNumberFloatProtocol",
+            default: "pyo3::class::number::PyNumberFloatProtocolImpl",
         },
         MethodProto::Unary {
             name: "__round__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRoundProtocol",
-            default: "pyo3::class::number::PyNumberRoundProtocol",
+            default: "pyo3::class::number::PyNumberRoundProtocolImpl",
         },
         MethodProto::Unary {
             name: "__index__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberIndexProtocol",
-            default: "pyo3::class::number::PyNumberIndexProtocol",
+            default: "pyo3::class::number::PyNumberIndexProtocolImpl",
         },
     ],
     py_methods: &[
diff --git a/src/class/basic.rs b/src/class/basic.rs
index f87a0d029..15d682886 100644
--- a/src/class/basic.rs
+++ b/src/class/basic.rs
@@ -166,13 +166,15 @@ pub trait PyObjectProtocolImpl {
 impl<'p, T> PyObjectProtocolImpl for T
 where
     T: PyObjectProtocol<'p>
-        + PyObjectSetAttrProtocol<'p>
         + GetAttrProtocolImpl
         + StrProtocolImpl
         + ReprProtocolImpl
         + HashProtocolImpl
         + RichcmpProtocolImpl
         + BoolProtocolImpl
+        + FormatProtocolImpl
+        + BytesProtocolImpl
+        + UnicodeProtocolImpl
         + tp_setattro_impl::DelAttr
         + tp_setattro_impl::SetAttr
         + tp_setattro_impl::SetDelAttr,
@@ -253,7 +255,7 @@ where
 /// and may support deleting attributes (by implementing PyObjectDelAttrProtocol)
 /// and we need to generate a single extern c function that supports only setting, only deleting
 /// or both, and return None in case none of the two is supported.
-mod tp_setattro_impl {
+pub mod tp_setattro_impl {
     use super::*;
 
     /// setattrofunc PyTypeObject.tp_setattro
@@ -314,6 +316,9 @@ mod tp_setattro_impl {
         }
     }
 
+    impl<T> SetDelAttr for T {}
+
+    /* MJDFIXME
     impl<T> SetDelAttr for T
     where
         T: for<'p> PyObjectSetAttrProtocol<'p> + for<'p> PyObjectDelAttrProtocol<'p>,
@@ -327,7 +332,7 @@ mod tp_setattro_impl {
                 __delattr__
             )
         }
-    }
+    } */
 }
 
 pub trait StrProtocolImpl {
@@ -376,7 +381,6 @@ pub trait FormatProtocolImpl {
         None
     }
 }
-impl<'p, T> FormatProtocolImpl for T where T: PyObjectProtocol<'p> {}
 
 #[doc(hidden)]
 pub trait BytesProtocolImpl {
@@ -384,7 +388,6 @@ pub trait BytesProtocolImpl {
         None
     }
 }
-impl<'p, T> BytesProtocolImpl for T where T: PyObjectProtocol<'p> {}
 
 #[doc(hidden)]
 pub trait UnicodeProtocolImpl {
@@ -392,7 +395,6 @@ pub trait UnicodeProtocolImpl {
         None
     }
 }
-impl<'p, T> UnicodeProtocolImpl for T where T: PyObjectProtocol<'p> {}
 
 pub trait HashProtocolImpl {
     fn tp_hash() -> Option<ffi::hashfunc> {
diff --git a/src/class/number.rs b/src/class/number.rs
index 796a1c7ea..faad83039 100644
--- a/src/class/number.rs
+++ b/src/class/number.rs
@@ -1273,8 +1273,6 @@ pub trait PyNumberRAddProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRAddProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRSubProtocolImpl {
     fn __rsub__() -> Option<PyMethodDef> {
@@ -1282,8 +1280,6 @@ pub trait PyNumberRSubProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRSubProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRMulProtocolImpl {
     fn __rmul__() -> Option<PyMethodDef> {
@@ -1291,8 +1287,6 @@ pub trait PyNumberRMulProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRMulProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRMatmulProtocolImpl {
     fn __rmatmul__() -> Option<PyMethodDef> {
@@ -1300,8 +1294,6 @@ pub trait PyNumberRMatmulProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRMatmulProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRTruedivProtocolImpl {
     fn __rtruediv__() -> Option<PyMethodDef> {
@@ -1309,8 +1301,6 @@ pub trait PyNumberRTruedivProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRTruedivProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRFloordivProtocolImpl {
     fn __rfloordiv__() -> Option<PyMethodDef> {
@@ -1318,8 +1308,6 @@ pub trait PyNumberRFloordivProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRFloordivProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRModProtocolImpl {
     fn __rmod__() -> Option<PyMethodDef> {
@@ -1327,8 +1315,6 @@ pub trait PyNumberRModProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRModProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRDivmodProtocolImpl {
     fn __rdivmod__() -> Option<PyMethodDef> {
@@ -1336,8 +1322,6 @@ pub trait PyNumberRDivmodProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRDivmodProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRPowProtocolImpl {
     fn __rpow__() -> Option<PyMethodDef> {
@@ -1345,8 +1329,6 @@ pub trait PyNumberRPowProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRPowProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRLShiftProtocolImpl {
     fn __rlshift__() -> Option<PyMethodDef> {
@@ -1354,8 +1336,6 @@ pub trait PyNumberRLShiftProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRLShiftProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRRShiftProtocolImpl {
     fn __rrshift__() -> Option<PyMethodDef> {
@@ -1363,8 +1343,6 @@ pub trait PyNumberRRShiftProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRRShiftProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRAndProtocolImpl {
     fn __rand__() -> Option<PyMethodDef> {
@@ -1372,8 +1350,6 @@ pub trait PyNumberRAndProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRAndProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberRXorProtocolImpl {
     fn __rxor__() -> Option<PyMethodDef> {
@@ -1381,8 +1357,6 @@ pub trait PyNumberRXorProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberRXorProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 #[doc(hidden)]
 pub trait PyNumberROrProtocolImpl {
     fn __ror__() -> Option<PyMethodDef> {
@@ -1390,8 +1364,6 @@ pub trait PyNumberROrProtocolImpl {
     }
 }
 
-impl<'p, T> PyNumberROrProtocolImpl for T where T: PyNumberProtocol<'p> {}
-
 pub trait PyNumberNegProtocolImpl {
     fn nb_negative() -> Option<ffi::unaryfunc> {
         None
