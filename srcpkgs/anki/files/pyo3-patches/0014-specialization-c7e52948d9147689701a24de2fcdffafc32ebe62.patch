From c7e52948d9147689701a24de2fcdffafc32ebe62 Mon Sep 17 00:00:00 2001
From: Martin Donlon <github-martin@donlons.com>
Date: Wed, 30 Oct 2019 22:12:49 -0700
Subject: [PATCH] pyclass protocols attribute parsing

---
 pyo3-derive-backend/src/pyclass.rs | 32 ++++++++++++++++++++++++++++++

diff --git a/pyo3-derive-backend/src/pyclass.rs b/pyo3-derive-backend/src/pyclass.rs
index 1f902a959..3ac5d4cde 100644
--- a/pyo3-derive-backend/src/pyclass.rs
+++ b/pyo3-derive-backend/src/pyclass.rs
@@ -16,6 +16,7 @@ pub struct PyClassArgs {
     pub flags: Vec<syn::Expr>,
     pub base: syn::TypePath,
     pub module: Option<syn::LitStr>,
+    pub protocols: Vec<syn::Ident>,
 }
 
 impl Parse for PyClassArgs {
@@ -40,6 +41,7 @@ impl Default for PyClassArgs {
             // are no other flags
             flags: vec![parse_quote! {0}],
             base: parse_quote! {pyo3::types::PyAny},
+            protocols: Vec::new(),
         }
     }
 }
@@ -110,6 +112,36 @@ impl PyClassArgs {
                     ));
                 }
             },
+            "protocols" => match *assign.right {
+                syn::Expr::Array(syn::ExprArray { ref elems, .. }) => {
+                    for elem in elems.iter() {
+                        match elem {
+                            syn::Expr::Path(syn::ExprPath { ref path, .. }) => {
+                                if path.segments.len() == 1 {
+                                    self.protocols.push(path.segments[0].ident.clone());
+                                } else {
+                                    return Err(syn::Error::new_spanned(
+                                        path.clone(),
+                                        "Expected an unqualified name for protocol",
+                                    ));
+                                }
+                            }
+                            _ => {
+                                return Err(syn::Error::new_spanned(
+                                    elem.clone(),
+                                    "Wrong format for protocol entry",
+                                ));
+                            }
+                        }
+                    }
+                }
+                _ => {
+                    return Err(syn::Error::new_spanned(
+                        *assign.right.clone(),
+                        "Wrong format for protocol",
+                    ));
+                }
+            },
             _ => {
                 return Err(syn::Error::new_spanned(
                     *assign.left.clone(),
