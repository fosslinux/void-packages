From cb1313bce9c80b0e7ff37c5317705ce0acf32c15 Mon Sep 17 00:00:00 2001
From: Martin Donlon <github-martin@donlons.com>
Date: Fri, 25 Oct 2019 20:51:08 -0700
Subject: [PATCH] Revert "Run `cargo fmt` on source code and update
 `CHANGELOG.md`"

This reverts commit 33bf37d3d8ca08d3af39de22547e32e7c8eb0f54.
---
 CHANGELOG.md                        |   1 -
 pyo3-derive-backend/src/pymethod.rs |   6 +-
 src/class/basic.rs                  |  55 ++-----
 src/class/buffer.rs                 |   5 +-
 src/class/context.rs                |  10 +-
 src/class/descr.rs                  |  10 +-
 src/class/gc.rs                     |  10 +-
 src/class/iter.rs                   |  10 +-
 src/class/mapping.rs                |  40 +----
 src/class/number.rs                 | 245 ++++++----------------------
 src/class/pyasync.rs                |  25 +--
 src/class/sequence.rs               |  45 +----
 src/conversion.rs                   |   5 +-
 13 files changed, 95 insertions(+), 372 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index a3aff9b31..482e9b01d 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -27,7 +27,6 @@ and `PyString::to_string_lossy` [#642](https://github.com/PyO3/pyo3/pull/642).
 ### Fixed
 
  * Make sure the right Python interpreter is used in OSX builds. [#604](https://github.com/PyO3/pyo3/pull/604)
- * Patch specialization being broken by Rust 1.40. [#614](https://github.com/PyO3/pyo3/issues/614)
  * Fix a segfault around PyErr. [#597](https://github.com/PyO3/pyo3/pull/597)
 
 ## [0.8.0] - 2018-09-05
diff --git a/pyo3-derive-backend/src/pymethod.rs b/pyo3-derive-backend/src/pymethod.rs
index 2f561cb9d..8c867a567 100644
--- a/pyo3-derive-backend/src/pymethod.rs
+++ b/pyo3-derive-backend/src/pymethod.rs
@@ -38,7 +38,7 @@ pub fn gen_py_method(
                     return Err(syn::Error::new_spanned(
                         spec.args[0].ty,
                         "Getter function can only have one argument of type pyo3::Python!",
-                    ));
+                    ))
                 }
             };
             impl_py_getter_def(name, doc, getter, &impl_wrap_getter(cls, name, takes_py))
@@ -60,10 +60,10 @@ fn check_generic(name: &syn::Ident, sig: &syn::Signature) -> syn::Result<()> {
         match param {
             syn::GenericParam::Lifetime(_) => {}
             syn::GenericParam::Type(_) => {
-                return Err(syn::Error::new_spanned(param, err_msg("type")));
+                return Err(syn::Error::new_spanned(param, err_msg("type")))
             }
             syn::GenericParam::Const(_) => {
-                return Err(syn::Error::new_spanned(param, err_msg("const")));
+                return Err(syn::Error::new_spanned(param, err_msg("const")))
             }
         }
     }
diff --git a/src/class/basic.rs b/src/class/basic.rs
index 8c670bf82..29e19871f 100644
--- a/src/class/basic.rs
+++ b/src/class/basic.rs
@@ -202,10 +202,7 @@ trait GetAttrProtocolImpl {
     fn tp_getattro() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> GetAttrProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> GetAttrProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn tp_getattro() -> Option<ffi::binaryfunc> {
         None
     }
@@ -299,10 +296,7 @@ mod tp_setattro_impl {
         fn del_attr() -> Option<ffi::setattrofunc>;
     }
 
-    impl<'p, T> DelAttr for T
-    where
-        T: PyObjectProtocol<'p>,
-    {
+    impl<'p, T> DelAttr for T where T: PyObjectProtocol<'p> {
         default fn del_attr() -> Option<ffi::setattrofunc> {
             None
         }
@@ -321,10 +315,7 @@ mod tp_setattro_impl {
         fn set_del_attr() -> Option<ffi::setattrofunc>;
     }
 
-    impl<'p, T> SetDelAttr for T
-    where
-        T: PyObjectProtocol<'p>,
-    {
+    impl<'p, T> SetDelAttr for T where T: PyObjectProtocol<'p> {
         default fn set_del_attr() -> Option<ffi::setattrofunc> {
             None
         }
@@ -349,10 +340,7 @@ mod tp_setattro_impl {
 trait StrProtocolImpl {
     fn tp_str() -> Option<ffi::unaryfunc>;
 }
-impl<'p, T> StrProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> StrProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn tp_str() -> Option<ffi::unaryfunc> {
         None
     }
@@ -374,10 +362,7 @@ where
 trait ReprProtocolImpl {
     fn tp_repr() -> Option<ffi::unaryfunc>;
 }
-impl<'p, T> ReprProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> ReprProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn tp_repr() -> Option<ffi::unaryfunc> {
         None
     }
@@ -400,10 +385,7 @@ where
 pub trait FormatProtocolImpl {
     fn __format__() -> Option<PyMethodDef>;
 }
-impl<'p, T> FormatProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> FormatProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn __format__() -> Option<PyMethodDef> {
         None
     }
@@ -413,10 +395,7 @@ where
 pub trait BytesProtocolImpl {
     fn __bytes__() -> Option<PyMethodDef>;
 }
-impl<'p, T> BytesProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> BytesProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn __bytes__() -> Option<PyMethodDef> {
         None
     }
@@ -426,10 +405,7 @@ where
 pub trait UnicodeProtocolImpl {
     fn __unicode__() -> Option<PyMethodDef>;
 }
-impl<'p, T> UnicodeProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> UnicodeProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn __unicode__() -> Option<PyMethodDef> {
         None
     }
@@ -438,10 +414,7 @@ where
 trait HashProtocolImpl {
     fn tp_hash() -> Option<ffi::hashfunc>;
 }
-impl<'p, T> HashProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> HashProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn tp_hash() -> Option<ffi::hashfunc> {
         None
     }
@@ -464,10 +437,7 @@ where
 trait BoolProtocolImpl {
     fn nb_bool() -> Option<ffi::inquiry>;
 }
-impl<'p, T> BoolProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> BoolProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn nb_bool() -> Option<ffi::inquiry> {
         None
     }
@@ -490,10 +460,7 @@ where
 trait RichcmpProtocolImpl {
     fn tp_richcompare() -> Option<ffi::richcmpfunc>;
 }
-impl<'p, T> RichcmpProtocolImpl for T
-where
-    T: PyObjectProtocol<'p>,
-{
+impl<'p, T> RichcmpProtocolImpl for T where T: PyObjectProtocol<'p> {
     default fn tp_richcompare() -> Option<ffi::richcmpfunc> {
         None
     }
diff --git a/src/class/buffer.rs b/src/class/buffer.rs
index f0f462db9..c30f078cc 100644
--- a/src/class/buffer.rs
+++ b/src/class/buffer.rs
@@ -69,10 +69,7 @@ trait PyBufferGetBufferProtocolImpl {
     fn cb_bf_getbuffer() -> Option<ffi::getbufferproc>;
 }
 
-impl<'p, T> PyBufferGetBufferProtocolImpl for T
-where
-    T: PyBufferProtocol<'p>,
-{
+impl<'p, T> PyBufferGetBufferProtocolImpl for T where T: PyBufferProtocol<'p> {
     default fn cb_bf_getbuffer() -> Option<ffi::getbufferproc> {
         None
     }
diff --git a/src/class/context.rs b/src/class/context.rs
index 50aea33e9..2ad59768d 100644
--- a/src/class/context.rs
+++ b/src/class/context.rs
@@ -80,10 +80,7 @@ pub trait PyContextEnterProtocolImpl {
     fn __enter__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyContextEnterProtocolImpl for T
-where
-    T: PyContextProtocol<'p>,
-{
+impl<'p, T> PyContextEnterProtocolImpl for T where T: PyContextProtocol<'p> {
     default fn __enter__() -> Option<PyMethodDef> {
         None
     }
@@ -94,10 +91,7 @@ pub trait PyContextExitProtocolImpl {
     fn __exit__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyContextExitProtocolImpl for T
-where
-    T: PyContextProtocol<'p>,
-{
+impl<'p, T> PyContextExitProtocolImpl for T where T: PyContextProtocol<'p> {
     default fn __exit__() -> Option<PyMethodDef> {
         None
     }
diff --git a/src/class/descr.rs b/src/class/descr.rs
index 57d9119ca..c7b5b9660 100644
--- a/src/class/descr.rs
+++ b/src/class/descr.rs
@@ -72,10 +72,7 @@ pub trait PyDescrSetNameProtocol<'p>: PyDescrProtocol<'p> {
 trait PyDescrGetProtocolImpl {
     fn tp_descr_get() -> Option<ffi::descrgetfunc>;
 }
-impl<'p, T> PyDescrGetProtocolImpl for T
-where
-    T: PyDescrProtocol<'p>,
-{
+impl<'p, T> PyDescrGetProtocolImpl for T where T: PyDescrProtocol<'p> {
     default fn tp_descr_get() -> Option<ffi::descrgetfunc> {
         None
     }
@@ -98,10 +95,7 @@ where
 trait PyDescrSetProtocolImpl {
     fn tp_descr_set() -> Option<ffi::descrsetfunc>;
 }
-impl<'p, T> PyDescrSetProtocolImpl for T
-where
-    T: PyDescrProtocol<'p>,
-{
+impl<'p, T> PyDescrSetProtocolImpl for T where T: PyDescrProtocol<'p> {
     default fn tp_descr_set() -> Option<ffi::descrsetfunc> {
         None
     }
diff --git a/src/class/gc.rs b/src/class/gc.rs
index 591b686af..4b69c9643 100644
--- a/src/class/gc.rs
+++ b/src/class/gc.rs
@@ -68,10 +68,7 @@ trait PyGCTraverseProtocolImpl {
     fn tp_traverse() -> Option<ffi::traverseproc>;
 }
 
-impl<'p, T> PyGCTraverseProtocolImpl for T
-where
-    T: PyGCProtocol<'p>,
-{
+impl<'p, T> PyGCTraverseProtocolImpl for T where T: PyGCProtocol<'p> {
     default fn tp_traverse() -> Option<ffi::traverseproc> {
         None
     }
@@ -115,10 +112,7 @@ trait PyGCClearProtocolImpl {
     fn tp_clear() -> Option<ffi::inquiry>;
 }
 
-impl<'p, T> PyGCClearProtocolImpl for T
-where
-    T: PyGCProtocol<'p>,
-{
+impl<'p, T> PyGCClearProtocolImpl for T where T: PyGCProtocol<'p> {
     default fn tp_clear() -> Option<ffi::inquiry> {
         None
     }
diff --git a/src/class/iter.rs b/src/class/iter.rs
index a528289dd..fcf76f2e5 100644
--- a/src/class/iter.rs
+++ b/src/class/iter.rs
@@ -66,10 +66,7 @@ trait PyIterIterProtocolImpl {
     fn tp_iter() -> Option<ffi::getiterfunc>;
 }
 
-impl<'p, T> PyIterIterProtocolImpl for T
-where
-    T: PyIterProtocol<'p>,
-{
+impl<'p, T> PyIterIterProtocolImpl for T where T: PyIterProtocol<'p> {
     default fn tp_iter() -> Option<ffi::getiterfunc> {
         None
     }
@@ -94,10 +91,7 @@ trait PyIterNextProtocolImpl {
     fn tp_iternext() -> Option<ffi::iternextfunc>;
 }
 
-impl<'p, T> PyIterNextProtocolImpl for T
-where
-    T: PyIterProtocol<'p>,
-{
+impl<'p, T> PyIterNextProtocolImpl for T where T: PyIterProtocol<'p> {
     default fn tp_iternext() -> Option<ffi::iternextfunc> {
         None
     }
diff --git a/src/class/mapping.rs b/src/class/mapping.rs
index 32326ff46..64d7b57ce 100644
--- a/src/class/mapping.rs
+++ b/src/class/mapping.rs
@@ -160,10 +160,7 @@ trait PyMappingLenProtocolImpl {
     fn mp_length() -> Option<ffi::lenfunc>;
 }
 
-impl<'p, T> PyMappingLenProtocolImpl for T
-where
-    T: PyMappingProtocol<'p>,
-{
+impl<'p, T> PyMappingLenProtocolImpl for T where T: PyMappingProtocol<'p> {
     default fn mp_length() -> Option<ffi::lenfunc> {
         None
     }
@@ -183,10 +180,7 @@ trait PyMappingGetItemProtocolImpl {
     fn mp_subscript() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyMappingGetItemProtocolImpl for T
-where
-    T: PyMappingProtocol<'p>,
-{
+impl<'p, T> PyMappingGetItemProtocolImpl for T where T: PyMappingProtocol<'p> {
     default fn mp_subscript() -> Option<ffi::binaryfunc> {
         None
     }
@@ -211,10 +205,7 @@ trait PyMappingSetItemProtocolImpl {
     fn mp_ass_subscript() -> Option<ffi::objobjargproc>;
 }
 
-impl<'p, T> PyMappingSetItemProtocolImpl for T
-where
-    T: PyMappingProtocol<'p>,
-{
+impl<'p, T> PyMappingSetItemProtocolImpl for T where T: PyMappingProtocol<'p> {
     default fn mp_ass_subscript() -> Option<ffi::objobjargproc> {
         None
     }
@@ -236,10 +227,7 @@ trait DeplItemDipatch {
     fn mp_del_subscript() -> Option<ffi::objobjargproc>;
 }
 
-impl<'p, T> DeplItemDipatch for T
-where
-    T: PyMappingProtocol<'p>,
-{
+impl<'p, T> DeplItemDipatch for T where T: PyMappingProtocol<'p> {
     default fn mp_del_subscript() -> Option<ffi::objobjargproc> {
         None
     }
@@ -250,10 +238,7 @@ trait DelSetItemDispatch: Sized + for<'p> PyMappingDelItemProtocol<'p> {
     fn det_set_dispatch() -> Option<ffi::objobjargproc>;
 }
 
-impl<T> DelSetItemDispatch for T
-where
-    T: Sized + for<'p> PyMappingDelItemProtocol<'p>,
-{
+impl<T> DelSetItemDispatch for T where T: Sized + for<'p> PyMappingDelItemProtocol<'p> {
     default fn det_set_dispatch() -> Option<ffi::objobjargproc> {
         py_func_del!(PyMappingDelItemProtocol, Self, __delitem__)
     }
@@ -288,10 +273,7 @@ pub trait PyMappingContainsProtocolImpl {
     fn __contains__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyMappingContainsProtocolImpl for T
-where
-    T: PyMappingProtocol<'p>,
-{
+impl<'p, T> PyMappingContainsProtocolImpl for T where T: PyMappingProtocol<'p> {
     default fn __contains__() -> Option<PyMethodDef> {
         None
     }
@@ -302,10 +284,7 @@ pub trait PyMappingReversedProtocolImpl {
     fn __reversed__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyMappingReversedProtocolImpl for T
-where
-    T: PyMappingProtocol<'p>,
-{
+impl<'p, T> PyMappingReversedProtocolImpl for T where T: PyMappingProtocol<'p> {
     default fn __reversed__() -> Option<PyMethodDef> {
         None
     }
@@ -316,10 +295,7 @@ pub trait PyMappingIterProtocolImpl {
     fn __iter__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyMappingIterProtocolImpl for T
-where
-    T: PyMappingProtocol<'p>,
-{
+impl<'p, T> PyMappingIterProtocolImpl for T where T: PyMappingProtocol<'p> {
     default fn __iter__() -> Option<PyMethodDef> {
         None
     }
diff --git a/src/class/number.rs b/src/class/number.rs
index 796b8bad9..0ab162e72 100644
--- a/src/class/number.rs
+++ b/src/class/number.rs
@@ -749,10 +749,7 @@ trait PyNumberAddProtocolImpl {
     fn nb_add() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberAddProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberAddProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_add() -> Option<ffi::binaryfunc> {
         None
     }
@@ -776,10 +773,7 @@ trait PyNumberSubProtocolImpl {
     fn nb_subtract() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberSubProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberSubProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_subtract() -> Option<ffi::binaryfunc> {
         None
     }
@@ -803,10 +797,7 @@ trait PyNumberMulProtocolImpl {
     fn nb_multiply() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberMulProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberMulProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_multiply() -> Option<ffi::binaryfunc> {
         None
     }
@@ -830,10 +821,7 @@ trait PyNumberMatmulProtocolImpl {
     fn nb_matrix_multiply() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberMatmulProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberMatmulProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_matrix_multiply() -> Option<ffi::binaryfunc> {
         None
     }
@@ -857,10 +845,7 @@ trait PyNumberTruedivProtocolImpl {
     fn nb_true_divide() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberTruedivProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberTruedivProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_true_divide() -> Option<ffi::binaryfunc> {
         None
     }
@@ -884,10 +869,7 @@ trait PyNumberFloordivProtocolImpl {
     fn nb_floor_divide() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberFloordivProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberFloordivProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_floor_divide() -> Option<ffi::binaryfunc> {
         None
     }
@@ -911,10 +893,7 @@ trait PyNumberModProtocolImpl {
     fn nb_remainder() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberModProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberModProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_remainder() -> Option<ffi::binaryfunc> {
         None
     }
@@ -938,10 +917,7 @@ trait PyNumberDivmodProtocolImpl {
     fn nb_divmod() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberDivmodProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberDivmodProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_divmod() -> Option<ffi::binaryfunc> {
         None
     }
@@ -965,10 +941,7 @@ trait PyNumberPowProtocolImpl {
     fn nb_power() -> Option<ffi::ternaryfunc>;
 }
 
-impl<'p, T> PyNumberPowProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberPowProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_power() -> Option<ffi::ternaryfunc> {
         None
     }
@@ -992,10 +965,7 @@ trait PyNumberLShiftProtocolImpl {
     fn nb_lshift() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberLShiftProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberLShiftProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_lshift() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1019,10 +989,7 @@ trait PyNumberRShiftProtocolImpl {
     fn nb_rshift() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberRShiftProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRShiftProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_rshift() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1046,10 +1013,7 @@ trait PyNumberAndProtocolImpl {
     fn nb_and() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberAndProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberAndProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_and() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1073,10 +1037,7 @@ trait PyNumberXorProtocolImpl {
     fn nb_xor() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberXorProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberXorProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_xor() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1100,10 +1061,7 @@ trait PyNumberOrProtocolImpl {
     fn nb_or() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberOrProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberOrProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_or() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1127,10 +1085,7 @@ trait PyNumberIAddProtocolImpl {
     fn nb_inplace_add() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIAddProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIAddProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_add() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1149,10 +1104,7 @@ trait PyNumberISubProtocolImpl {
     fn nb_inplace_subtract() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberISubProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberISubProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_subtract() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1171,10 +1123,7 @@ trait PyNumberIMulProtocolImpl {
     fn nb_inplace_multiply() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIMulProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIMulProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_multiply() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1193,10 +1142,7 @@ trait PyNumberIMatmulProtocolImpl {
     fn nb_inplace_matrix_multiply() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIMatmulProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIMatmulProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_matrix_multiply() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1215,10 +1161,7 @@ trait PyNumberITruedivProtocolImpl {
     fn nb_inplace_true_divide() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberITruedivProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberITruedivProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_true_divide() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1237,10 +1180,7 @@ trait PyNumberIFloordivProtocolImpl {
     fn nb_inplace_floor_divide() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIFloordivProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIFloordivProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_floor_divide() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1259,10 +1199,7 @@ trait PyNumberIModProtocolImpl {
     fn nb_inplace_remainder() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIModProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIModProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_remainder() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1281,10 +1218,7 @@ trait PyNumberIPowProtocolImpl {
     fn nb_inplace_power() -> Option<ffi::ternaryfunc>;
 }
 
-impl<'p, T> PyNumberIPowProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIPowProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_power() -> Option<ffi::ternaryfunc> {
         None
     }
@@ -1303,10 +1237,7 @@ trait PyNumberILShiftProtocolImpl {
     fn nb_inplace_lshift() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberILShiftProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberILShiftProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_lshift() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1325,10 +1256,7 @@ trait PyNumberIRShiftProtocolImpl {
     fn nb_inplace_rshift() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIRShiftProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIRShiftProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_rshift() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1347,10 +1275,7 @@ trait PyNumberIAndProtocolImpl {
     fn nb_inplace_and() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIAndProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIAndProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_and() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1369,10 +1294,7 @@ trait PyNumberIXorProtocolImpl {
     fn nb_inplace_xor() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIXorProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIXorProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_xor() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1391,10 +1313,7 @@ trait PyNumberIOrProtocolImpl {
     fn nb_inplace_or() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PyNumberIOrProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIOrProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_inplace_or() -> Option<ffi::binaryfunc> {
         None
     }
@@ -1414,10 +1333,7 @@ pub trait PyNumberRAddProtocolImpl {
     fn __radd__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRAddProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRAddProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __radd__() -> Option<PyMethodDef> {
         None
     }
@@ -1437,10 +1353,7 @@ pub trait PyNumberRMulProtocolImpl {
     fn __rmul__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRMulProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRMulProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rmul__() -> Option<PyMethodDef> {
         None
     }
@@ -1451,10 +1364,7 @@ pub trait PyNumberRMatmulProtocolImpl {
     fn __rmatmul__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRMatmulProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRMatmulProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rmatmul__() -> Option<PyMethodDef> {
         None
     }
@@ -1465,10 +1375,7 @@ pub trait PyNumberRTruedivProtocolImpl {
     fn __rtruediv__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRTruedivProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRTruedivProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rtruediv__() -> Option<PyMethodDef> {
         None
     }
@@ -1479,10 +1386,7 @@ pub trait PyNumberRFloordivProtocolImpl {
     fn __rfloordiv__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRFloordivProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRFloordivProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rfloordiv__() -> Option<PyMethodDef> {
         None
     }
@@ -1493,10 +1397,7 @@ pub trait PyNumberRModProtocolImpl {
     fn __rmod__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRModProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRModProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rmod__() -> Option<PyMethodDef> {
         None
     }
@@ -1507,10 +1408,7 @@ pub trait PyNumberRDivmodProtocolImpl {
     fn __rdivmod__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRDivmodProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRDivmodProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rdivmod__() -> Option<PyMethodDef> {
         None
     }
@@ -1521,10 +1419,7 @@ pub trait PyNumberRPowProtocolImpl {
     fn __rpow__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRPowProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRPowProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rpow__() -> Option<PyMethodDef> {
         None
     }
@@ -1535,10 +1430,7 @@ pub trait PyNumberRLShiftProtocolImpl {
     fn __rlshift__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRLShiftProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRLShiftProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rlshift__() -> Option<PyMethodDef> {
         None
     }
@@ -1549,10 +1441,7 @@ pub trait PyNumberRRShiftProtocolImpl {
     fn __rrshift__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRRShiftProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRRShiftProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rrshift__() -> Option<PyMethodDef> {
         None
     }
@@ -1563,10 +1452,7 @@ pub trait PyNumberRAndProtocolImpl {
     fn __rand__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRAndProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRAndProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rand__() -> Option<PyMethodDef> {
         None
     }
@@ -1577,10 +1463,7 @@ pub trait PyNumberRXorProtocolImpl {
     fn __rxor__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRXorProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRXorProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __rxor__() -> Option<PyMethodDef> {
         None
     }
@@ -1591,10 +1474,7 @@ pub trait PyNumberROrProtocolImpl {
     fn __ror__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberROrProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberROrProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __ror__() -> Option<PyMethodDef> {
         None
     }
@@ -1604,10 +1484,7 @@ trait PyNumberNegProtocolImpl {
     fn nb_negative() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyNumberNegProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberNegProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_negative() -> Option<ffi::unaryfunc> {
         None
     }
@@ -1632,10 +1509,7 @@ trait PyNumberPosProtocolImpl {
     fn nb_positive() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyNumberPosProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberPosProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_positive() -> Option<ffi::unaryfunc> {
         None
     }
@@ -1659,10 +1533,7 @@ trait PyNumberAbsProtocolImpl {
     fn nb_absolute() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyNumberAbsProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberAbsProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_absolute() -> Option<ffi::unaryfunc> {
         None
     }
@@ -1686,10 +1557,7 @@ trait PyNumberInvertProtocolImpl {
     fn nb_invert() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyNumberInvertProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberInvertProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_invert() -> Option<ffi::unaryfunc> {
         None
     }
@@ -1713,10 +1581,7 @@ trait PyNumberIntProtocolImpl {
     fn nb_int() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyNumberIntProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIntProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_int() -> Option<ffi::unaryfunc> {
         None
     }
@@ -1740,10 +1605,7 @@ trait PyNumberFloatProtocolImpl {
     fn nb_float() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyNumberFloatProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberFloatProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_float() -> Option<ffi::unaryfunc> {
         None
     }
@@ -1767,10 +1629,7 @@ trait PyNumberIndexProtocolImpl {
     fn nb_index() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyNumberIndexProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberIndexProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn nb_index() -> Option<ffi::unaryfunc> {
         None
     }
@@ -1794,10 +1653,7 @@ trait PyNumberComplexProtocolImpl {
     fn __complex__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberComplexProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberComplexProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __complex__() -> Option<PyMethodDef> {
         None
     }
@@ -1807,10 +1663,7 @@ trait PyNumberRoundProtocolImpl {
     fn __round__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyNumberRoundProtocolImpl for T
-where
-    T: PyNumberProtocol<'p>,
-{
+impl<'p, T> PyNumberRoundProtocolImpl for T where T: PyNumberProtocol<'p> {
     default fn __round__() -> Option<PyMethodDef> {
         None
     }
diff --git a/src/class/pyasync.rs b/src/class/pyasync.rs
index 2536d4ce2..f977fadfa 100644
--- a/src/class/pyasync.rs
+++ b/src/class/pyasync.rs
@@ -137,10 +137,7 @@ trait PyAsyncAwaitProtocolImpl {
     fn am_await() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyAsyncAwaitProtocolImpl for T
-where
-    T: PyAsyncProtocol<'p>,
-{
+impl<'p, T> PyAsyncAwaitProtocolImpl for T where T: PyAsyncProtocol<'p> {
     default fn am_await() -> Option<ffi::unaryfunc> {
         None
     }
@@ -165,10 +162,7 @@ trait PyAsyncAiterProtocolImpl {
     fn am_aiter() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyAsyncAiterProtocolImpl for T
-where
-    T: PyAsyncProtocol<'p>,
-{
+impl<'p, T> PyAsyncAiterProtocolImpl for T where T: PyAsyncProtocol<'p> {
     default fn am_aiter() -> Option<ffi::unaryfunc> {
         None
     }
@@ -193,10 +187,7 @@ trait PyAsyncAnextProtocolImpl {
     fn am_anext() -> Option<ffi::unaryfunc>;
 }
 
-impl<'p, T> PyAsyncAnextProtocolImpl for T
-where
-    T: PyAsyncProtocol<'p>,
-{
+impl<'p, T> PyAsyncAnextProtocolImpl for T where T: PyAsyncProtocol<'p> {
     default fn am_anext() -> Option<ffi::unaryfunc> {
         None
     }
@@ -254,10 +245,7 @@ trait PyAsyncAenterProtocolImpl {
     fn __aenter__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyAsyncAenterProtocolImpl for T
-where
-    T: PyAsyncProtocol<'p>,
-{
+impl<'p, T> PyAsyncAenterProtocolImpl for T where T: PyAsyncProtocol<'p> {
     default fn __aenter__() -> Option<PyMethodDef> {
         None
     }
@@ -267,10 +255,7 @@ trait PyAsyncAexitProtocolImpl {
     fn __aexit__() -> Option<PyMethodDef>;
 }
 
-impl<'p, T> PyAsyncAexitProtocolImpl for T
-where
-    T: PyAsyncProtocol<'p>,
-{
+impl<'p, T> PyAsyncAexitProtocolImpl for T where T: PyAsyncProtocol<'p> {
     default fn __aexit__() -> Option<PyMethodDef> {
         None
     }
diff --git a/src/class/sequence.rs b/src/class/sequence.rs
index 5414704a1..ce65508fd 100644
--- a/src/class/sequence.rs
+++ b/src/class/sequence.rs
@@ -167,10 +167,7 @@ trait PySequenceLenProtocolImpl {
     fn sq_length() -> Option<ffi::lenfunc>;
 }
 
-impl<'p, T> PySequenceLenProtocolImpl for T
-where
-    T: PySequenceProtocol<'p>,
-{
+impl<'p, T> PySequenceLenProtocolImpl for T where T: PySequenceProtocol<'p> {
     default fn sq_length() -> Option<ffi::lenfunc> {
         None
     }
@@ -189,10 +186,7 @@ trait PySequenceGetItemProtocolImpl {
     fn sq_item() -> Option<ffi::ssizeargfunc>;
 }
 
-impl<'p, T> PySequenceGetItemProtocolImpl for T
-where
-    T: PySequenceProtocol<'p>,
-{
+impl<'p, T> PySequenceGetItemProtocolImpl for T where T: PySequenceProtocol<'p> {
     default fn sq_item() -> Option<ffi::ssizeargfunc> {
         None
     }
@@ -298,10 +292,7 @@ mod sq_ass_item_impl {
         fn del_item() -> Option<ffi::ssizeobjargproc>;
     }
 
-    impl<'p, T> DelItem for T
-    where
-        T: PySequenceProtocol<'p>,
-    {
+    impl<'p, T> DelItem for T where T: PySequenceProtocol<'p> {
         default fn del_item() -> Option<ffi::ssizeobjargproc> {
             None
         }
@@ -349,10 +340,7 @@ mod sq_ass_item_impl {
         fn del_set_item() -> Option<ffi::ssizeobjargproc>;
     }
 
-    impl<'p, T> DelSetItem for T
-    where
-        T: PySequenceProtocol<'p>,
-    {
+    impl<'p, T> DelSetItem for T where T: PySequenceProtocol<'p> {
         default fn del_set_item() -> Option<ffi::ssizeobjargproc> {
             None
         }
@@ -401,10 +389,7 @@ trait PySequenceContainsProtocolImpl {
     fn sq_contains() -> Option<ffi::objobjproc>;
 }
 
-impl<'p, T> PySequenceContainsProtocolImpl for T
-where
-    T: PySequenceProtocol<'p>,
-{
+impl<'p, T> PySequenceContainsProtocolImpl for T where T: PySequenceProtocol<'p> {
     default fn sq_contains() -> Option<ffi::objobjproc> {
         None
     }
@@ -429,10 +414,7 @@ trait PySequenceConcatProtocolImpl {
     fn sq_concat() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PySequenceConcatProtocolImpl for T
-where
-    T: PySequenceProtocol<'p>,
-{
+impl<'p, T> PySequenceConcatProtocolImpl for T where T: PySequenceProtocol<'p> {
     default fn sq_concat() -> Option<ffi::binaryfunc> {
         None
     }
@@ -456,10 +438,7 @@ trait PySequenceRepeatProtocolImpl {
     fn sq_repeat() -> Option<ffi::ssizeargfunc>;
 }
 
-impl<'p, T> PySequenceRepeatProtocolImpl for T
-where
-    T: PySequenceProtocol<'p>,
-{
+impl<'p, T> PySequenceRepeatProtocolImpl for T where T: PySequenceProtocol<'p> {
     default fn sq_repeat() -> Option<ffi::ssizeargfunc> {
         None
     }
@@ -483,10 +462,7 @@ trait PySequenceInplaceConcatProtocolImpl {
     fn sq_inplace_concat() -> Option<ffi::binaryfunc>;
 }
 
-impl<'p, T> PySequenceInplaceConcatProtocolImpl for T
-where
-    T: PySequenceProtocol<'p>,
-{
+impl<'p, T> PySequenceInplaceConcatProtocolImpl for T where T: PySequenceProtocol<'p> {
     default fn sq_inplace_concat() -> Option<ffi::binaryfunc> {
         None
     }
@@ -510,10 +486,7 @@ trait PySequenceInplaceRepeatProtocolImpl {
     fn sq_inplace_repeat() -> Option<ffi::ssizeargfunc>;
 }
 
-impl<'p, T> PySequenceInplaceRepeatProtocolImpl for T
-where
-    T: PySequenceProtocol<'p>,
-{
+impl<'p, T> PySequenceInplaceRepeatProtocolImpl for T where T: PySequenceProtocol<'p> {
     default fn sq_inplace_repeat() -> Option<ffi::ssizeargfunc> {
         None
     }
diff --git a/src/conversion.rs b/src/conversion.rs
index 38f436de4..15ccdabde 100644
--- a/src/conversion.rs
+++ b/src/conversion.rs
@@ -100,10 +100,7 @@ pub trait ToBorrowedObject: ToPyObject {
         F: FnOnce(*mut ffi::PyObject) -> R;
 }
 
-impl<T> ToBorrowedObject for T
-where
-    T: ToPyObject,
-{
+impl<T> ToBorrowedObject for T where T: ToPyObject {
     default fn with_borrowed_ptr<F, R>(&self, py: Python, f: F) -> R
     where
         F: FnOnce(*mut ffi::PyObject) -> R,
