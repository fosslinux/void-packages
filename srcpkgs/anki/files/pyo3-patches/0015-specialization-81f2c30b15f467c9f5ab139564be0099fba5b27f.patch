From 81f2c30b15f467c9f5ab139564be0099fba5b27f Mon Sep 17 00:00:00 2001
From: Martin Donlon <github-martin@donlons.com>
Date: Thu, 31 Oct 2019 22:40:33 -0700
Subject: [PATCH] Add lookup function for protocol defs

---
 pyo3-derive-backend/src/defs.rs    | 40 ++++++++++++++++++++++--------
 pyo3-derive-backend/src/pyproto.rs | 15 +++--------
 2 files changed, 33 insertions(+), 22 deletions(-)

diff --git a/pyo3-derive-backend/src/defs.rs b/pyo3-derive-backend/src/defs.rs
index 04c1fa3b0..52024c12b 100644
--- a/pyo3-derive-backend/src/defs.rs
+++ b/pyo3-derive-backend/src/defs.rs
@@ -7,12 +7,22 @@ pub struct Proto {
     pub py_methods: &'static [PyMethod],
 }
 
+impl Proto {
+    pub fn protocol_trait(&self) -> String {
+        format!("Py{}Protocol", self.name)
+    }
+
+    pub fn _impl_trait(&self) -> String {
+        format!("Py{}ProtocolImpl", self.name)
+    }
+}
+
 pub struct PyMethod {
     pub name: &'static str,
     pub proto: &'static str,
 }
 
-pub const OBJECT: Proto = Proto {
+const OBJECT: Proto = Proto {
     name: "Object",
     methods: &[
         MethodProto::Binary {
@@ -88,7 +98,7 @@ pub const OBJECT: Proto = Proto {
     ],
 };
 
-pub const ASYNC: Proto = Proto {
+const ASYNC: Proto = Proto {
     name: "Async",
     methods: &[
         MethodProto::Unary {
@@ -131,7 +141,7 @@ pub const ASYNC: Proto = Proto {
     ],
 };
 
-pub const BUFFER: Proto = Proto {
+const BUFFER: Proto = Proto {
     name: "Buffer",
     methods: &[
         MethodProto::Unary {
@@ -148,7 +158,7 @@ pub const BUFFER: Proto = Proto {
     py_methods: &[],
 };
 
-pub const CONTEXT: Proto = Proto {
+const CONTEXT: Proto = Proto {
     name: "Context",
     methods: &[
         MethodProto::Unary {
@@ -176,7 +186,7 @@ pub const CONTEXT: Proto = Proto {
     ],
 };
 
-pub const GC: Proto = Proto {
+const GC: Proto = Proto {
     name: "GC",
     methods: &[
         MethodProto::Free {
@@ -191,7 +201,7 @@ pub const GC: Proto = Proto {
     py_methods: &[],
 };
 
-pub const DESCR: Proto = Proto {
+const DESCR: Proto = Proto {
     name: "Descriptor",
     methods: &[
         MethodProto::Ternary {
@@ -233,7 +243,7 @@ pub const DESCR: Proto = Proto {
     ],
 };
 
-pub const ITER: Proto = Proto {
+const ITER: Proto = Proto {
     name: "Iter",
     py_methods: &[],
     methods: &[
@@ -250,7 +260,7 @@ pub const ITER: Proto = Proto {
     ],
 };
 
-pub const MAPPING: Proto = Proto {
+const MAPPING: Proto = Proto {
     name: "Mapping",
     methods: &[
         MethodProto::Unary {
@@ -310,7 +320,7 @@ pub const MAPPING: Proto = Proto {
     ],
 };
 
-pub const SEQ: Proto = Proto {
+const SEQ: Proto = Proto {
     name: "Sequence",
     methods: &[
         MethodProto::Unary {
@@ -371,7 +381,7 @@ pub const SEQ: Proto = Proto {
     py_methods: &[],
 };
 
-pub const NUM: Proto = Proto {
+const NUM: Proto = Proto {
     name: "Number",
     methods: &[
         MethodProto::BinaryS {
@@ -750,3 +760,13 @@ pub const NUM: Proto = Proto {
         },
     ],
 };
+
+const PROTOCOLS: &[Proto] = &[
+    OBJECT, ASYNC, MAPPING, ITER, CONTEXT, SEQ, NUM, DESCR, BUFFER, GC,
+];
+
+pub fn find_protocol(protocol_trait: &str) -> Option<&'static Proto> {
+    PROTOCOLS
+        .iter()
+        .find(|p| p.protocol_trait() == protocol_trait)
+}
diff --git a/pyo3-derive-backend/src/pyproto.rs b/pyo3-derive-backend/src/pyproto.rs
index c0921bcbb..41f1deaf9 100644
--- a/pyo3-derive-backend/src/pyproto.rs
+++ b/pyo3-derive-backend/src/pyproto.rs
@@ -12,18 +12,9 @@ use quote::ToTokens;
 pub fn build_py_proto(ast: &mut syn::ItemImpl) -> syn::Result<TokenStream> {
     if let Some((_, ref mut path, _)) = ast.trait_ {
         let proto = if let Some(ref mut segment) = path.segments.last() {
-            match segment.ident.to_string().as_str() {
-                "PyObjectProtocol" => &defs::OBJECT,
-                "PyAsyncProtocol" => &defs::ASYNC,
-                "PyMappingProtocol" => &defs::MAPPING,
-                "PyIterProtocol" => &defs::ITER,
-                "PyContextProtocol" => &defs::CONTEXT,
-                "PySequenceProtocol" => &defs::SEQ,
-                "PyNumberProtocol" => &defs::NUM,
-                "PyDescrProtocol" => &defs::DESCR,
-                "PyBufferProtocol" => &defs::BUFFER,
-                "PyGCProtocol" => &defs::GC,
-                _ => {
+            match defs::find_protocol(segment.ident.to_string().as_str()) {
+                Some(p) => p,
+                None => {
                     return Err(syn::Error::new_spanned(
                         path,
                         "#[pyproto] can not be used with this block",
