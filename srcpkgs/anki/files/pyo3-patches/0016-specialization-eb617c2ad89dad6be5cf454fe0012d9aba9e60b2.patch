From eb617c2ad89dad6be5cf454fe0012d9aba9e60b2 Mon Sep 17 00:00:00 2001
From: Martin Donlon <github-martin@donlons.com>
Date: Sun, 3 Nov 2019 18:06:54 -0800
Subject: [PATCH] Proc macros now add the necessary default implementations

---
 .vscode/settings.json                         |   3 +-
 pyo3-derive-backend/src/defs.rs               | 137 ++++++++++++++++--
 pyo3-derive-backend/src/func.rs               |  37 +++++
 pyo3-derive-backend/src/pyclass.rs            |  34 ++++-
 pyo3-derive-backend/src/pyproto.rs            |  91 +++++++-----
 src/buffer.rs                                 |   5 +-
 src/class/buffer.rs                           |   6 +
 src/lib.rs                                    |   4 +-

diff --git a/pyo3-derive-backend/src/defs.rs b/pyo3-derive-backend/src/defs.rs
index 52024c12b..06c1c6754 100644
--- a/pyo3-derive-backend/src/defs.rs
+++ b/pyo3-derive-backend/src/defs.rs
@@ -3,20 +3,12 @@ use crate::func::MethodProto;
 
 pub struct Proto {
     pub name: &'static str,
+    pub protocol_trait: &'static str,
+    pub impl_trait: &'static str,
     pub methods: &'static [MethodProto],
     pub py_methods: &'static [PyMethod],
 }
 
-impl Proto {
-    pub fn protocol_trait(&self) -> String {
-        format!("Py{}Protocol", self.name)
-    }
-
-    pub fn _impl_trait(&self) -> String {
-        format!("Py{}ProtocolImpl", self.name)
-    }
-}
-
 pub struct PyMethod {
     pub name: &'static str,
     pub proto: &'static str,
@@ -24,12 +16,15 @@ pub struct PyMethod {
 
 const OBJECT: Proto = Proto {
     name: "Object",
+    protocol_trait: "pyo3::class::basic::PyObjectProtocol",
+    impl_trait: "pyo3::class::basic::PyObjectProtocolImpl",
     methods: &[
         MethodProto::Binary {
             name: "__getattr__",
             arg: "Name",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectGetAttrProtocol",
+            default: "pyo3::class::basic::PyObjectGetAttrProtocol",
         },
         MethodProto::Ternary {
             name: "__setattr__",
@@ -37,49 +32,58 @@ const OBJECT: Proto = Proto {
             arg2: "Value",
             pyres: false,
             proto: "pyo3::class::basic::PyObjectSetAttrProtocol",
+            default: "pyo3::class::basic::PyObjectSetAttrProtocol",
         },
         MethodProto::Binary {
             name: "__delattr__",
             arg: "Name",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectDelAttrProtocol",
+            default: "pyo3::class::basic::PyObjectDelAttrProtocol",
         },
         MethodProto::Unary {
             name: "__str__",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectStrProtocol",
+            default: "pyo3::class::basic::PyObjectStrProtocol",
         },
         MethodProto::Unary {
             name: "__repr__",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectReprProtocol",
+            default: "pyo3::class::basic::PyObjectReprProtocol",
         },
         MethodProto::Binary {
             name: "__format__",
             arg: "Format",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectFormatProtocol",
+            default: "pyo3::class::basic::PyObjectFormatProtocol",
         },
         MethodProto::Unary {
             name: "__hash__",
             pyres: false,
             proto: "pyo3::class::basic::PyObjectHashProtocol",
+            default: "pyo3::class::basic::PyObjectHashProtocol",
         },
         MethodProto::Unary {
             name: "__bytes__",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectBytesProtocol",
+            default: "pyo3::class::basic::PyObjectBytesProtocol",
         },
         MethodProto::Unary {
             name: "__bool__",
             pyres: false,
             proto: "pyo3::class::basic::PyObjectBoolProtocol",
+            default: "pyo3::class::basic::PyObjectBoolProtocol",
         },
         MethodProto::Binary {
             name: "__richcmp__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::basic::PyObjectRichcmpProtocol",
+            default: "pyo3::class::basic::PyObjectRichcmpProtocol",
         },
     ],
     py_methods: &[
@@ -100,26 +104,32 @@ const OBJECT: Proto = Proto {
 
 const ASYNC: Proto = Proto {
     name: "Async",
+    protocol_trait: "pyo3::class::pyasync::PyAsyncProtocol",
+    impl_trait: "pyo3::class::pyasync::PyAsyncProtocolImpl",
     methods: &[
         MethodProto::Unary {
             name: "__await__",
             pyres: true,
             proto: "pyo3::class::pyasync::PyAsyncAwaitProtocol",
+            default: "pyo3::class::pyasync::PyAsyncAwaitProtocol",
         },
         MethodProto::Unary {
             name: "__aiter__",
             pyres: true,
             proto: "pyo3::class::pyasync::PyAsyncAiterProtocol",
+            default: "pyo3::class::pyasync::PyAsyncAiterProtocol",
         },
         MethodProto::Unary {
             name: "__anext__",
             pyres: true,
             proto: "pyo3::class::pyasync::PyAsyncAnextProtocol",
+            default: "pyo3::class::pyasync::PyAsyncAnextProtocol",
         },
         MethodProto::Unary {
             name: "__aenter__",
             pyres: true,
             proto: "pyo3::class::pyasync::PyAsyncAenterProtocol",
+            default: "pyo3::class::pyasync::PyAsyncAenterProtocol",
         },
         MethodProto::Quaternary {
             name: "__aexit__",
@@ -127,6 +137,7 @@ const ASYNC: Proto = Proto {
             arg2: "ExcValue",
             arg3: "Traceback",
             proto: "pyo3::class::pyasync::PyAsyncAexitProtocol",
+            default: "pyo3::class::pyasync::PyAsyncAexitProtocol",
         },
     ],
     py_methods: &[
@@ -143,16 +154,20 @@ const ASYNC: Proto = Proto {
 
 const BUFFER: Proto = Proto {
     name: "Buffer",
+    protocol_trait: "pyo3::class::buffer::PyBufferProtocol",
+    impl_trait: "pyo3::class::buffer::PyBufferProtocolImpl",
     methods: &[
         MethodProto::Unary {
             name: "bf_getbuffer",
             pyres: false,
             proto: "pyo3::class::buffer::PyBufferGetBufferProtocol",
+            default: "pyo3::class::buffer::PyBufferGetBufferProtocolImpl",
         },
         MethodProto::Unary {
             name: "bf_releasebuffer",
             pyres: false,
             proto: "pyo3::class::buffer::PyBufferReleaseBufferProtocol",
+            default: "pyo3::class::buffer::PyBufferReleaseBufferProtocolImpl",
         },
     ],
     py_methods: &[],
@@ -160,11 +175,14 @@ const BUFFER: Proto = Proto {
 
 const CONTEXT: Proto = Proto {
     name: "Context",
+    protocol_trait: "pyo3::class::context::PyContextProtocol",
+    impl_trait: "pyo3::class::context::PyContextProtocolImpl",
     methods: &[
         MethodProto::Unary {
             name: "__enter__",
             pyres: true,
             proto: "pyo3::class::context::PyContextEnterProtocol",
+            default: "pyo3::class::context::PyContextEnterProtocol",
         },
         MethodProto::Quaternary {
             name: "__exit__",
@@ -172,6 +190,7 @@ const CONTEXT: Proto = Proto {
             arg2: "ExcValue",
             arg3: "Traceback",
             proto: "pyo3::class::context::PyContextExitProtocol",
+            default: "pyo3::class::context::PyContextExitProtocol",
         },
     ],
     py_methods: &[
@@ -188,14 +207,19 @@ const CONTEXT: Proto = Proto {
 
 const GC: Proto = Proto {
     name: "GC",
+    protocol_trait: "pyo3::class::gc::PyGCProtocol",
+    impl_trait: "pyo3::class::gc::PyGCProtocolImpl",
+
     methods: &[
         MethodProto::Free {
             name: "__traverse__",
             proto: "pyo3::class::gc::PyGCTraverseProtocol",
+            default: "pyo3::class::gc::PyGCTraverseProtocolImpl",
         },
         MethodProto::Free {
             name: "__clear__",
             proto: "pyo3::class::gc::PyGCClearProtocol",
+            default: "pyo3::class::gc::PyGCClearProtocolImpl",
         },
     ],
     py_methods: &[],
@@ -203,6 +227,9 @@ const GC: Proto = Proto {
 
 const DESCR: Proto = Proto {
     name: "Descriptor",
+    protocol_trait: "pyo3::class::descr::PyDescrProtocol",
+    impl_trait: "pyo3::class::descr::PyDescrProtocolImpl",
+
     methods: &[
         MethodProto::Ternary {
             name: "__get__",
@@ -210,6 +237,7 @@ const DESCR: Proto = Proto {
             arg2: "Owner",
             pyres: true,
             proto: "pyo3::class::descr::PyDescrGetProtocol",
+            default: "pyo3::class::descr::PyDescrGetProtocol",
         },
         MethodProto::Ternary {
             name: "__set__",
@@ -217,18 +245,21 @@ const DESCR: Proto = Proto {
             arg2: "Value",
             pyres: true,
             proto: "pyo3::class::descr::PyDescrSetProtocol",
+            default: "pyo3::class::descr::PyDescrSetProtocol",
         },
         MethodProto::Binary {
             name: "__det__",
             arg: "Inst",
             pyres: false,
             proto: "pyo3::class::descr::PyDescrDelProtocol",
+            default: "pyo3::class::descr::PyDescrDelProtocol",
         },
         MethodProto::Binary {
             name: "__set_name__",
             arg: "Inst",
             pyres: false,
             proto: "pyo3::class::descr::PyDescrSetNameProtocol",
+            default: "pyo3::class::descr::PyDescrSetNameProtocol",
         },
     ],
     py_methods: &[
@@ -245,34 +276,44 @@ const DESCR: Proto = Proto {
 
 const ITER: Proto = Proto {
     name: "Iter",
+    protocol_trait: "pyo3::class::iter::PyIterProtocol",
+    impl_trait: "pyo3::class::iter::PyIterProtocolImpl",
+
     py_methods: &[],
     methods: &[
         MethodProto::Unary {
             name: "__iter__",
             pyres: true,
             proto: "pyo3::class::iter::PyIterIterProtocol",
+            default: "pyo3::class::iter::PyIterIterProtocol",
         },
         MethodProto::Unary {
             name: "__next__",
             pyres: true,
             proto: "pyo3::class::iter::PyIterNextProtocol",
+            default: "pyo3::class::iter::PyIterNextProtocol",
         },
     ],
 };
 
 const MAPPING: Proto = Proto {
     name: "Mapping",
+    protocol_trait: "pyo3::class::mapping::PyMappingProtocol",
+    impl_trait: "pyo3::class::mapping::PyMappingProtocolImpl",
+
     methods: &[
         MethodProto::Unary {
             name: "__len__",
             pyres: false,
             proto: "pyo3::class::mapping::PyMappingLenProtocol",
+            default: "pyo3::class::mapping::PyMappingLenProtocol",
         },
         MethodProto::Binary {
             name: "__getitem__",
             arg: "Key",
             pyres: true,
             proto: "pyo3::class::mapping::PyMappingGetItemProtocol",
+            default: "pyo3::class::mapping::PyMappingGetItemProtocol",
         },
         MethodProto::Ternary {
             name: "__setitem__",
@@ -280,28 +321,33 @@ const MAPPING: Proto = Proto {
             arg2: "Value",
             pyres: false,
             proto: "pyo3::class::mapping::PyMappingSetItemProtocol",
+            default: "pyo3::class::mapping::PyMappingSetItemProtocol",
         },
         MethodProto::Binary {
             name: "__delitem__",
             arg: "Key",
             pyres: false,
             proto: "pyo3::class::mapping::PyMappingDelItemProtocol",
+            default: "pyo3::class::mapping::PyMappingDelItemProtocol",
         },
         MethodProto::Binary {
             name: "__contains__",
             arg: "Value",
             pyres: false,
             proto: "pyo3::class::mapping::PyMappingContainsProtocol",
+            default: "pyo3::class::mapping::PyMappingContainsProtocol",
         },
         MethodProto::Unary {
             name: "__reversed__",
             pyres: true,
             proto: "pyo3::class::mapping::PyMappingReversedProtocol",
+            default: "pyo3::class::mapping::PyMappingReversedProtocol",
         },
         MethodProto::Unary {
             name: "__iter__",
             pyres: true,
             proto: "pyo3::class::mapping::PyMappingIterProtocol",
+            default: "pyo3::class::mapping::PyMappingIterProtocol",
         },
     ],
     py_methods: &[
@@ -322,17 +368,22 @@ const MAPPING: Proto = Proto {
 
 const SEQ: Proto = Proto {
     name: "Sequence",
+    protocol_trait: "pyo3::class::sequence::PySequenceProtocol",
+    impl_trait: "pyo3::class::sequence::PySequenceProtocolImpl",
+
     methods: &[
         MethodProto::Unary {
             name: "__len__",
             pyres: false,
             proto: "pyo3::class::sequence::PySequenceLenProtocol",
+            default: "pyo3::class::sequence::PySequenceLenProtocolImpl",
         },
         MethodProto::Binary {
             name: "__getitem__",
             arg: "Index",
             pyres: true,
             proto: "pyo3::class::sequence::PySequenceGetItemProtocol",
+            default: "pyo3::class::sequence::PySequenceGetItemProtocolImpl",
         },
         MethodProto::Ternary {
             name: "__setitem__",
@@ -340,42 +391,49 @@ const SEQ: Proto = Proto {
             arg2: "Value",
             pyres: false,
             proto: "pyo3::class::sequence::PySequenceSetItemProtocol",
+            default: "pyo3::class::sequence::PySequenceSetItemProtocolImpl",
         },
         MethodProto::Binary {
             name: "__delitem__",
             arg: "Index",
             pyres: false,
             proto: "pyo3::class::sequence::PySequenceDelItemProtocol",
+            default: "pyo3::class::sequence::PySequenceDelItemProtocolImpl",
         },
         MethodProto::Binary {
             name: "__contains__",
             arg: "Item",
             pyres: false,
             proto: "pyo3::class::sequence::PySequenceContainsProtocol",
+            default: "pyo3::class::sequence::PySequenceContainsProtocolImpl",
         },
         MethodProto::Binary {
             name: "__concat__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::sequence::PySequenceConcatProtocol",
+            default: "pyo3::class::sequence::PySequenceConcatProtocolImpl",
         },
         MethodProto::Binary {
             name: "__repeat__",
             arg: "Index",
             pyres: true,
             proto: "pyo3::class::sequence::PySequenceRepeatProtocol",
+            default: "pyo3::class::sequence::PySequenceRepeatProtocolImpl",
         },
         MethodProto::Binary {
             name: "__inplace_concat__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::sequence::PySequenceInplaceConcatProtocol",
+            default: "pyo3::class::sequence::PySequenceInplaceConcatProtocolImpl",
         },
         MethodProto::Binary {
             name: "__inplace_repeat__",
             arg: "Index",
             pyres: true,
             proto: "pyo3::class::sequence::PySequenceInplaceRepeatProtocol",
+            default: "pyo3::class::sequence::PySequenceInplaceRepeatProtocolImpl",
         },
     ],
     py_methods: &[],
@@ -383,6 +441,9 @@ const SEQ: Proto = Proto {
 
 const NUM: Proto = Proto {
     name: "Number",
+    protocol_trait: "pyo3::class::number::PyNumberProtocol",
+    impl_trait: "pyo3::class::number::PyNumberProtocolImpl",
+
     methods: &[
         MethodProto::BinaryS {
             name: "__add__",
@@ -390,6 +451,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberAddProtocol",
+            default: "pyo3::class::number::PyNumberAddProtocol",
         },
         MethodProto::BinaryS {
             name: "__sub__",
@@ -397,6 +459,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberSubProtocol",
+            default: "pyo3::class::number::PyNumberSubProtocol",
         },
         MethodProto::BinaryS {
             name: "__mul__",
@@ -404,6 +467,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberMulProtocol",
+            default: "pyo3::class::number::PyNumberMulProtocol",
         },
         MethodProto::BinaryS {
             name: "__matmul__",
@@ -411,6 +475,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberMatmulProtocol",
+            default: "pyo3::class::number::PyNumberMatmulProtocol",
         },
         MethodProto::BinaryS {
             name: "__truediv__",
@@ -418,6 +483,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberTruedivProtocol",
+            default: "pyo3::class::number::PyNumberTruedivProtocol",
         },
         MethodProto::BinaryS {
             name: "__floordiv__",
@@ -425,6 +491,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberFloordivProtocol",
+            default: "pyo3::class::number::PyNumberFloordivProtocol",
         },
         MethodProto::BinaryS {
             name: "__mod__",
@@ -432,6 +499,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberModProtocol",
+            default: "pyo3::class::number::PyNumberModProtocol",
         },
         MethodProto::BinaryS {
             name: "__divmod__",
@@ -439,6 +507,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberDivmodProtocol",
+            default: "pyo3::class::number::PyNumberDivmodProtocol",
         },
         MethodProto::TernaryS {
             name: "__pow__",
@@ -447,6 +516,7 @@ const NUM: Proto = Proto {
             arg3: "Modulo",
             pyres: true,
             proto: "pyo3::class::number::PyNumberPowProtocol",
+            default: "pyo3::class::number::PyNumberPowProtocol",
         },
         MethodProto::BinaryS {
             name: "__lshift__",
@@ -454,6 +524,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberLShiftProtocol",
+            default: "pyo3::class::number::PyNumberLShiftProtocol",
         },
         MethodProto::BinaryS {
             name: "__rshift__",
@@ -461,6 +532,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRShiftProtocol",
+            default: "pyo3::class::number::PyNumberRShiftProtocol",
         },
         MethodProto::BinaryS {
             name: "__and__",
@@ -468,6 +540,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberAndProtocol",
+            default: "pyo3::class::number::PyNumberAndProtocol",
         },
         MethodProto::BinaryS {
             name: "__xor__",
@@ -475,6 +548,7 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberXorProtocol",
+            default: "pyo3::class::number::PyNumberXorProtocol",
         },
         MethodProto::BinaryS {
             name: "__or__",
@@ -482,54 +556,63 @@ const NUM: Proto = Proto {
             arg2: "Right",
             pyres: true,
             proto: "pyo3::class::number::PyNumberOrProtocol",
+            default: "pyo3::class::number::PyNumberOrProtocol",
         },
         MethodProto::Binary {
             name: "__radd__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRAddProtocol",
+            default: "pyo3::class::number::PyNumberRAddProtocol",
         },
         MethodProto::Binary {
             name: "__rsub__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRSubProtocol",
+            default: "pyo3::class::number::PyNumberRSubProtocol",
         },
         MethodProto::Binary {
             name: "__rmul__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRMulProtocol",
+            default: "pyo3::class::number::PyNumberRMulProtocol",
         },
         MethodProto::Binary {
             name: "__rmatmul__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRMatmulProtocol",
+            default: "pyo3::class::number::PyNumberRMatmulProtocol",
         },
         MethodProto::Binary {
             name: "__rtruediv__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRTruedivProtocol",
+            default: "pyo3::class::number::PyNumberRTruedivProtocol",
         },
         MethodProto::Binary {
             name: "__rfloordiv__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRFloordivProtocol",
+            default: "pyo3::class::number::PyNumberRFloordivProtocol",
         },
         MethodProto::Binary {
             name: "__rmod__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRModProtocol",
+            default: "pyo3::class::number::PyNumberRModProtocol",
         },
         MethodProto::Binary {
             name: "__rdivmod__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRDivmodProtocol",
+            default: "pyo3::class::number::PyNumberRDivmodProtocol",
         },
         MethodProto::Ternary {
             name: "__rpow__",
@@ -537,78 +620,91 @@ const NUM: Proto = Proto {
             arg2: "Modulo",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRPowProtocol",
+            default: "pyo3::class::number::PyNumberRPowProtocol",
         },
         MethodProto::Binary {
             name: "__rlshift__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRLShiftProtocol",
+            default: "pyo3::class::number::PyNumberRLShiftProtocol",
         },
         MethodProto::Binary {
             name: "__rrshift__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRRShiftProtocol",
+            default: "pyo3::class::number::PyNumberRRShiftProtocol",
         },
         MethodProto::Binary {
             name: "__rand__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRAndProtocol",
+            default: "pyo3::class::number::PyNumberRAndProtocol",
         },
         MethodProto::Binary {
             name: "__rxor__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRXorProtocol",
+            default: "pyo3::class::number::PyNumberRXorProtocol",
         },
         MethodProto::Binary {
             name: "__ror__",
             arg: "Other",
             pyres: true,
             proto: "pyo3::class::number::PyNumberROrProtocol",
+            default: "pyo3::class::number::PyNumberROrProtocol",
         },
         MethodProto::Binary {
             name: "__iadd__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIAddProtocol",
+            default: "pyo3::class::number::PyNumberIAddProtocol",
         },
         MethodProto::Binary {
             name: "__isub__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberISubProtocol",
+            default: "pyo3::class::number::PyNumberISubProtocol",
         },
         MethodProto::Binary {
             name: "__imul__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIMulProtocol",
+            default: "pyo3::class::number::PyNumberIMulProtocol",
         },
         MethodProto::Binary {
             name: "__imatmul__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIMatmulProtocol",
+            default: "pyo3::class::number::PyNumberIMatmulProtocol",
         },
         MethodProto::Binary {
             name: "__itruediv__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberITruedivProtocol",
+            default: "pyo3::class::number::PyNumberITruedivProtocol",
         },
         MethodProto::Binary {
             name: "__ifloordiv__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIFloordivProtocol",
+            default: "pyo3::class::number::PyNumberIFloordivProtocol",
         },
         MethodProto::Binary {
             name: "__imod__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIModProtocol",
+            default: "pyo3::class::number::PyNumberIModProtocol",
         },
         MethodProto::Ternary {
             name: "__ipow__",
@@ -616,81 +712,96 @@ const NUM: Proto = Proto {
             arg2: "Modulo",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIPowProtocol",
+            default: "pyo3::class::number::PyNumberIPowProtocol",
         },
         MethodProto::Binary {
             name: "__ilshift__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberILShiftProtocol",
+            default: "pyo3::class::number::PyNumberILShiftProtocol",
         },
         MethodProto::Binary {
             name: "__irshift__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIRShiftProtocol",
+            default: "pyo3::class::number::PyNumberIRShiftProtocol",
         },
         MethodProto::Binary {
             name: "__iand__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIAndProtocol",
+            default: "pyo3::class::number::PyNumberIAndProtocol",
         },
         MethodProto::Binary {
             name: "__ixor__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIXorProtocol",
+            default: "pyo3::class::number::PyNumberIXorProtocol",
         },
         MethodProto::Binary {
             name: "__ior__",
             arg: "Other",
             pyres: false,
             proto: "pyo3::class::number::PyNumberIOrProtocol",
+            default: "pyo3::class::number::PyNumberIOrProtocol",
         },
         MethodProto::Unary {
             name: "__neg__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberNegProtocol",
+            default: "pyo3::class::number::PyNumberNegProtocol",
         },
         MethodProto::Unary {
             name: "__pos__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberPosProtocol",
+            default: "pyo3::class::number::PyNumberPosProtocol",
         },
         MethodProto::Unary {
             name: "__abs__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberAbsProtocol",
+            default: "pyo3::class::number::PyNumberAbsProtocol",
         },
         MethodProto::Unary {
             name: "__invert__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberInvertProtocol",
+            default: "pyo3::class::number::PyNumberInvertProtocol",
         },
         MethodProto::Unary {
             name: "__complex__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberComplexProtocol",
+            default: "pyo3::class::number::PyNumberComplexProtocol",
         },
         MethodProto::Unary {
             name: "__int__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberIntProtocol",
+            default: "pyo3::class::number::PyNumberIntProtocol",
         },
         MethodProto::Unary {
             name: "__float__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberFloatProtocol",
+            default: "pyo3::class::number::PyNumberFloatProtocol",
         },
         MethodProto::Unary {
             name: "__round__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberRoundProtocol",
+            default: "pyo3::class::number::PyNumberRoundProtocol",
         },
         MethodProto::Unary {
             name: "__index__",
             pyres: true,
             proto: "pyo3::class::number::PyNumberIndexProtocol",
+            default: "pyo3::class::number::PyNumberIndexProtocol",
         },
     ],
     py_methods: &[
@@ -765,8 +876,12 @@ const PROTOCOLS: &[Proto] = &[
     OBJECT, ASYNC, MAPPING, ITER, CONTEXT, SEQ, NUM, DESCR, BUFFER, GC,
 ];
 
+pub fn all_protocols() -> &'static [Proto] {
+    PROTOCOLS
+}
+
 pub fn find_protocol(protocol_trait: &str) -> Option<&'static Proto> {
     PROTOCOLS
         .iter()
-        .find(|p| p.protocol_trait() == protocol_trait)
+        .find(|p| p.protocol_trait.ends_with(protocol_trait))
 }
diff --git a/pyo3-derive-backend/src/func.rs b/pyo3-derive-backend/src/func.rs
index 2b7f69aca..ce06716f4 100644
--- a/pyo3-derive-backend/src/func.rs
+++ b/pyo3-derive-backend/src/func.rs
@@ -12,17 +12,20 @@ pub enum MethodProto {
     Free {
         name: &'static str,
         proto: &'static str,
+        default: &'static str,
     },
     Unary {
         name: &'static str,
         pyres: bool,
         proto: &'static str,
+        default: &'static str,
     },
     Binary {
         name: &'static str,
         arg: &'static str,
         pyres: bool,
         proto: &'static str,
+        default: &'static str,
     },
     BinaryS {
         name: &'static str,
@@ -30,6 +33,7 @@ pub enum MethodProto {
         arg2: &'static str,
         pyres: bool,
         proto: &'static str,
+        default: &'static str,
     },
     Ternary {
         name: &'static str,
@@ -37,6 +41,7 @@ pub enum MethodProto {
         arg2: &'static str,
         pyres: bool,
         proto: &'static str,
+        default: &'static str,
     },
     TernaryS {
         name: &'static str,
@@ -45,6 +50,7 @@ pub enum MethodProto {
         arg3: &'static str,
         pyres: bool,
         proto: &'static str,
+        default: &'static str,
     },
     Quaternary {
         name: &'static str,
@@ -52,6 +58,7 @@ pub enum MethodProto {
         arg2: &'static str,
         arg3: &'static str,
         proto: &'static str,
+        default: &'static str,
     },
 }
 
@@ -69,6 +76,31 @@ impl PartialEq<str> for MethodProto {
     }
 }
 
+impl MethodProto {
+    pub fn get_proto(&self) -> &'static str {
+        match *self {
+            MethodProto::Free { proto: p, .. } => p,
+            MethodProto::Unary { proto: p, .. } => p,
+            MethodProto::Binary { proto: p, .. } => p,
+            MethodProto::BinaryS { proto: p, .. } => p,
+            MethodProto::Ternary { proto: p, .. } => p,
+            MethodProto::TernaryS { proto: p, .. } => p,
+            MethodProto::Quaternary { proto: p, .. } => p,
+        }
+    }
+    pub fn get_default(&self) -> &'static str {
+        match *self {
+            MethodProto::Free { default: d, .. } => d,
+            MethodProto::Unary { default: d, .. } => d,
+            MethodProto::Binary { default: d, .. } => d,
+            MethodProto::BinaryS { default: d, .. } => d,
+            MethodProto::Ternary { default: d, .. } => d,
+            MethodProto::TernaryS { default: d, .. } => d,
+            MethodProto::Quaternary { default: d, .. } => d,
+        }
+    }
+}
+
 pub fn impl_method_proto(
     cls: &syn::Type,
     sig: &mut syn::Signature,
@@ -119,6 +151,7 @@ pub fn impl_method_proto(
             arg,
             pyres,
             proto,
+            default: _,
         } => {
             if sig.inputs.len() <= 1 {
                 println!("Not enough arguments for {}", name);
@@ -164,6 +197,7 @@ pub fn impl_method_proto(
             arg2,
             pyres,
             proto,
+            default: _,
         } => {
             if sig.inputs.len() <= 1 {
                 print_err(format!("Not enough arguments {}", name), quote!(sig));
@@ -213,6 +247,7 @@ pub fn impl_method_proto(
             arg2,
             pyres,
             proto,
+            default: _,
         } => {
             if sig.inputs.len() <= 2 {
                 print_err(format!("Not enough arguments {}", name), quote!(sig));
@@ -266,6 +301,7 @@ pub fn impl_method_proto(
             arg3,
             pyres,
             proto,
+            default: _,
         } => {
             if sig.inputs.len() <= 2 {
                 print_err(format!("Not enough arguments {}", name), quote!(sig));
@@ -322,6 +358,7 @@ pub fn impl_method_proto(
             arg2,
             arg3,
             proto,
+            default: _,
         } => {
             if sig.inputs.len() <= 3 {
                 print_err(format!("Not enough arguments {}", name), quote!(sig));
diff --git a/pyo3-derive-backend/src/pyclass.rs b/pyo3-derive-backend/src/pyclass.rs
index 3ac5d4cde..59a0ab29f 100644
--- a/pyo3-derive-backend/src/pyclass.rs
+++ b/pyo3-derive-backend/src/pyclass.rs
@@ -1,10 +1,10 @@
 // Copyright (c) 2017-present PyO3 Project and Contributors
-
+use crate::defs;
 use crate::method::{FnArg, FnSpec, FnType};
 use crate::pymethod::{impl_py_getter_def, impl_py_setter_def, impl_wrap_getter, impl_wrap_setter};
 use crate::utils;
 use proc_macro2::{Span, TokenStream};
-use quote::quote;
+use quote::{format_ident, quote};
 use syn::parse::{Parse, ParseStream};
 use syn::punctuated::Punctuated;
 use syn::{parse_quote, Expr, Token};
@@ -326,6 +326,14 @@ fn impl_class(
         extra
     };
 
+    let extra = {
+        let default_impls = impl_default_protocols(&cls, &attr);
+        quote! {
+            #default_impls
+            #extra
+        }
+    };
+
     // insert space for weak ref
     let mut has_weakref = false;
     let mut has_dict = false;
@@ -414,6 +422,9 @@ fn impl_class(
             }
         }
 
+        //impl<T: pyo3::type_object::PyTypeInfo> pyo3::AsPyRefDispatch<T> for #cls {}
+        //impl pyo3::ManagedPyRefDispatch for #cls {}
+
         #inventory_impl
 
         #extra
@@ -531,3 +542,22 @@ fn check_generics(class: &mut syn::ItemStruct) -> syn::Result<()> {
         ))
     }
 }
+
+fn impl_default_protocols(cls: &syn::Ident, attr: &PyClassArgs) -> TokenStream {
+    let impls: Vec<TokenStream> = defs::all_protocols()
+        .iter()
+        .filter_map(|proto| {
+            if attr
+                .protocols
+                .iter()
+                .any(|x| proto.protocol_trait.ends_with(&x.to_string()))
+            {
+                None
+            } else {
+                let impl_trait: syn::Path = syn::parse_str(proto.impl_trait).unwrap();
+                Some(quote! { impl #impl_trait for #cls {} })
+            }
+        })
+        .collect();
+    quote! { #(#impls)* }
+}
diff --git a/pyo3-derive-backend/src/pyproto.rs b/pyo3-derive-backend/src/pyproto.rs
index 41f1deaf9..a73232e1f 100644
--- a/pyo3-derive-backend/src/pyproto.rs
+++ b/pyo3-derive-backend/src/pyproto.rs
@@ -1,7 +1,7 @@
 // Copyright (c) 2017-present PyO3 Project and Contributors
 
 use crate::defs;
-use crate::func::impl_method_proto;
+use crate::func::{impl_method_proto, MethodProto};
 use crate::method::FnSpec;
 use crate::pymethod;
 use proc_macro2::Span;
@@ -53,49 +53,70 @@ fn impl_proto_impl(
     let mut tokens = TokenStream::new();
     let mut py_methods = Vec::new();
 
+    let mut unimpl_methods: Vec<&MethodProto> = proto.methods.iter().collect();
+    let mut unimpl_py_methods: Vec<&defs::PyMethod> = proto.py_methods.iter().collect();
+
     for iimpl in impls.iter_mut() {
         if let syn::ImplItem::Method(ref mut met) = iimpl {
-            for m in proto.methods {
-                if m == met.sig.ident.to_string().as_str() {
-                    impl_method_proto(ty, &mut met.sig, m).to_tokens(&mut tokens);
-                }
-            }
-            for m in proto.py_methods {
-                let ident = met.sig.ident.clone();
-                if m.name == ident.to_string().as_str() {
-                    let name = syn::Ident::new(m.name, Span::call_site());
-                    let proto: syn::Path = syn::parse_str(m.proto).unwrap();
-
-                    let fn_spec = match FnSpec::parse(&ident, &met.sig, &mut met.attrs) {
-                        Ok(fn_spec) => fn_spec,
-                        Err(err) => return err.to_compile_error(),
-                    };
-                    let meth = pymethod::impl_proto_wrap(ty, &ident, &fn_spec);
-
-                    py_methods.push(quote! {
-                        impl #proto for #ty
-                        {
-                            #[inline]
-                            fn #name() -> Option<pyo3::class::methods::PyMethodDef> {
-                                #meth
-
-                                Some(pyo3::class::PyMethodDef {
-                                    ml_name: stringify!(#name),
-                                    ml_meth: pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
-                                    ml_flags: pyo3::ffi::METH_VARARGS | pyo3::ffi::METH_KEYWORDS,
-                                    ml_doc: ""
-                                })
-                            }
+            let method_name = met.sig.ident.to_string();
+            // Find the method in unimpl_methods, remove it and implement it
+            unimpl_methods
+                .iter()
+                .position(|m| *m == method_name.as_str())
+                .map(|idx| {
+                    let method = unimpl_methods.swap_remove(idx);
+                    impl_method_proto(ty, &mut met.sig, method).to_tokens(&mut tokens);
+                });
+
+            // MJDFIXME - undo this change
+            let py_method_name = &met.sig.ident;
+            let method = unimpl_py_methods
+                .iter()
+                .position(|m| m.name == py_method_name.to_string().as_str())
+                .map(|idx| unimpl_py_methods.swap_remove(idx));
+
+            if let Some(m) = method {
+                let name = syn::Ident::new(m.name, Span::call_site());
+                let proto: syn::Path = syn::parse_str(m.proto).unwrap();
+
+                let fn_spec = match FnSpec::parse(&py_method_name, &met.sig, &mut met.attrs) {
+                    Ok(fn_spec) => fn_spec,
+                    Err(err) => return err.to_compile_error(),
+                };
+                let meth = pymethod::impl_proto_wrap(ty, &py_method_name, &fn_spec);
+
+                py_methods.push(quote! {
+                    impl #proto for #ty
+                    {
+                        #[inline]
+                        fn #name() -> Option<pyo3::class::methods::PyMethodDef> {
+                            #meth
+
+                            Some(pyo3::class::PyMethodDef {
+                                ml_name: stringify!(#name),
+                                ml_meth: pyo3::class::PyMethodType::PyCFunctionWithKeywords(__wrap),
+                                ml_flags: pyo3::ffi::METH_VARARGS | pyo3::ffi::METH_KEYWORDS,
+                                ml_doc: ""
+                            })
                         }
-                    });
-                }
-            }
+                    }
+                });
+            };
         }
     }
 
+    let default_impls: Vec<_> = unimpl_methods
+        .iter()
+        .map(|m| {
+            let proto: syn::Path = syn::parse_str(m.get_default()).unwrap();
+            quote! { impl #proto for #ty {} }
+        })
+        .collect();
     quote! {
         #tokens
 
         #(#py_methods)*
+
+        #(#default_impls)*
     }
 }
diff --git a/src/buffer.rs b/src/buffer.rs
index 91c317f6e..cdb305ad4 100644
--- a/src/buffer.rs
+++ b/src/buffer.rs
@@ -710,8 +710,9 @@ mod test {
     fn test_array_buffer() {
         let gil = Python::acquire_gil();
         let py = gil.python();
-        let array = py
-            .import("array")
+        let arr = py.import("array");
+        println!("{:?}", arr);
+        let array = arr
             .unwrap()
             .call_method("array", ("f", (1.0, 1.5, 2.0, 2.5)), None)
             .unwrap();
diff --git a/src/class/buffer.rs b/src/class/buffer.rs
index 32d1a25af..48ecc58ce 100644
--- a/src/class/buffer.rs
+++ b/src/class/buffer.rs
@@ -91,3 +91,9 @@ where
         Some(wrap::<T>)
     }
 }
+
+pub trait PyBufferReleaseBufferProtocolImpl {
+    fn cb_bf_releasebuffer() -> Option<ffi::releasebufferproc> {
+        None
+    }
+}
diff --git a/src/lib.rs b/src/lib.rs
index 65fb611db..49e71ef6d 100755
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -122,7 +122,9 @@ pub use crate::conversion::{
 };
 pub use crate::err::{PyDowncastError, PyErr, PyErrArguments, PyErrValue, PyResult};
 pub use crate::gil::{init_once, GILGuard, GILPool};
-pub use crate::instance::{AsPyRef, ManagedPyRef, Py, PyNativeType, PyRef, PyRefMut};
+pub use crate::instance::{
+    AsPyRef, AsPyRefDispatch, ManagedPyRef, ManagedPyRefDispatch, Py, PyNativeType, PyRef, PyRefMut,
+};
 pub use crate::object::PyObject;
 pub use crate::objectprotocol::ObjectProtocol;
 pub use crate::python::{prepare_freethreaded_python, Python};
